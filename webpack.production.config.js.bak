// const HtmlWebpackPlugin = require('html-webpack-plugin');
/* eslint-disable */
const webpack = require('webpack');
const path = require('path');
const LodashModuleReplacementPlugin = require('lodash-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const HardSourceWebpackPlugin = require('hard-source-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const threadLoader = require('thread-loader');
const ManifestPlugin = require('webpack-manifest-plugin');
const FaviconsWebpackPlugin = require('favicons-webpack-plugin');
const WorkboxPlugin = require('workbox-webpack-plugin');
const webpackbar = require("webpackbar"); // 进度条
const FriendlyErrorsWebpackPlugin=require('friendly-errors-webpack-plugin');

const BuildPath = './build;

/**
 * 基础路径
 * 比如我上传到自己的服务器填写的是："/work/pwa/"，最终访问为"https://isluo.com/work/pwa/"
 * 根据你自己的需求填写
 * "/" 就是根路径，假如最终项目上线的地址为：https://isluo.com/， 那就可以直接写"/"
 * **/

// threadLoader.warmup({
//   // pool options, like passed to loader options
//   // must match loader options to boot the correct pool
// }, [
//   // modules to load
//   // can be any module, i. e.
//   'babel-loader',
//   'css-loader',
//   // 'style-loader',
//   MiniCssExtractPlugin.loader,
//   // 'isomorphic-style-loader',
//   'sass-loader',
//   'less-loader'
// ]);


module.exports = {
  // devtool: 'false',
  devtool:'source-map',
  cache:  true,
  entry:  [
    // "core-js/modules/es6.promise",
    // "core-js/modules/es6.array.iterator",
    path.resolve(__dirname, "src", "index"),

  ],
  output: {
    path:     path.resolve(__dirname, 'build/static/js'),
    // publicPath: PUBLIC_PATH,
    filename: "[name].[chunkhash:8].js",
    chunkFilename: "[name].[chunkhash:8].chunk.js",
  },
  resolve: {
    extensions: [".ts", ".tsx", ".js", "jsx","json"],
    modules: [path.resolve( __dirname,'node modules')]
  },
  module: {
    rules: [
      {
        // test:    /\.(js|jsx)?/,
        test: /\.js$/,
        // exclude: /node_modules/,
        exclude: /(node_modules|bower_components)/,
        // use: 'happypack/loader',
        // use:     {
        //   loader: 'babel-loader?cacheDirectory',
        // },
        use: [
        //   {
        //     loader:"thread-loader",
        //     options: {
        //       // the number of spawned workers, defaults to (number of cpus - 1) or
        //       // fallback to 1 when require('os').cpus() is undefined
        //       workers: require('os').cpus().length - 1,

        //       // number of jobs a worker processes in parallel
        //       // defaults to 20
        //       workerParallelJobs: 50,

        //       // additional node.js arguments
        //       workerNodeArgs: ['--max-old-space-size=1024'],

        //       // Allow to respawn a dead worker pool
        //       // respawning slows down the entire compilation
        //       // and should be set to false for development
        //       poolRespawn: false,

        //       // timeout for killing the worker processes when idle
        //       // defaults to 500 (ms)
        //       // can be set to Infinity for watching builds to keep workers alive
        //       poolTimeout: 2000,

        //       // number of jobs the poll distributes to the workers
        //       // defaults to 200
        //       // decrease of less efficient but more fair distribution
        //       poolParallelJobs: 50,

        //       // name of the pool
        //       // can be used to create different pools with elsewise identical options
        //       name: "my-pool"
        //     }
        // },
        {
            loader: 'babel-loader',
            options: {
              presets: ['@babel/preset-env'],
              plugins: ['@babel/plugin-transform-runtime'],
              cacheDirectory:true,
            }
        }
      ]},  //此处将之前配置的babel的一些预设什么的替换为happy/loader。id=js，因为happy也可以打包css,
      {
        test: /\.css$/i,
        use: [
          {
            // loader:'style-loader',
            loader: MiniCssExtractPlugin.loader,
            options: {
              esModule: true,
            },
          },
          {
            loader: 'css-loader',
            options: {
              modules: true,
              import: (parsedImport, resourcePath) => {
                // parsedImport.url - url of `@import`
                // parsedImport.media - media query of `@import`
                // resourcePath - path to css file

                // Don't handle `style.css` import
                if (parsedImport.url.includes('style.css')) {
                  return false;
                }

                return true;
              },
            },
          }
        ]
        // use: ['isomorphic-style-loader', 'css-loader']
      },
      {
        test: /\.s[ac]ss$/i,
        use: [
          // Creates `style` nodes from JS strings
          // 'style-loader',
          MiniCssExtractPlugin.loader,
          // 'isomorphic-style-loader',
          // Translates CSS into CommonJS
          'css-loader',
          // Compiles Sass to CSS
          'sass-loader',
        ],
      },
      {
        test: /\.less$/,
        use: [
          {
            // loader:'style-loader',
            loader: MiniCssExtractPlugin.loader,
            options: {
              esModule: true,
            },
            // loader: 'isomorphic-style-loader',
          },
          {
            loader: 'css-loader',
          },
          {
            loader: 'less-loader',
            options: {
              // modifyVars: {
              //     'primary-color': '#1DA57A',
              //     'link-color': '#1DA57A',
              //     'border-radius-base': '2px',
              //     // or
              //     'hack': `true; @import "your-less-file-path.less";`, // Override with less file
              //   },
                javascriptEnabled: true, // 恶心 bug一般的代码 来支持 antd
              },
          },
        ],
      },
      {
        test: /\.(png|jpg|gif)$/i,
        use:  [
          {
            loader:  'url-loader',
            options: {
              limit: 8192,
              // mimetype:'image/tif'
            },
          },
        ],
      },
    ],

  },
  optimization: {
    splitChunks: {
      chunks: 'all', // 仅提取按需载入的module
      minSize: 30000, // 提取出的新chunk在两次压缩(打包压缩和服务器压缩)之前要大于30kb
      maxSize: 0, // 提取出的新chunk在两次压缩之前要小于多少kb，默认为0，即不做限制
      minChunks: 2, // 被提取的chunk最少需要被多少chunks共同引入
      maxAsyncRequests: 5, // 最大按需载入chunks提取数
      maxInitialRequests: 3, // 最大初始同步chunks提取数
      automaticNameDelimiter: '~', // 默认的命名规则（使用~进行连接）
      name: false,
      cacheGroups: { // 缓存组配置，默认有vendors和default
        vendors: {
          test: /[\\/]node_modules[\\/]/,
          priority: -10
        },
        default: {
          minChunks: 2,
          priority: -20,
          reuseExistingChunk: true
        },
        commons: {
          name: 'commons',
          chunks: 'initial',
          minChunks: 2
        }
      }
    },

    runtimeChunk: {
      name: entrypoint => `runtime-${entrypoint.name}`,
    },

    minimizer: [
      new TerserPlugin({
        cache: true,
        parallel: true,
        sourceMap: true, // Must be set to true if using source-maps in production
        terserOptions: {
          parse: {
            // We want terser to parse ecma 8 code. However, we don't want it
            // to apply any minification steps that turns valid ecma 5 code
            // into invalid ecma 5 code. This is why the 'compress' and 'output'
            // sections only apply transformations that are ecma 5 safe
            // https://github.com/facebook/create-react-app/pull/4234
            ecma: 8,
          },
          compress: {
            ecma: 5,
            warnings: false,
            // Disabled because of an issue with Uglify breaking seemingly valid code:
            // https://github.com/facebook/create-react-app/issues/2376
            // Pending further investigation:
            // https://github.com/mishoo/UglifyJS2/issues/2011
            comparisons: false,
            // Disabled because of an issue with Terser breaking valid code:
            // https://github.com/facebook/create-react-app/issues/5250
            // Pending further investigation:
            // https://github.com/terser-js/terser/issues/120
            inline: 2,
          },
          mangle: {
            safari10: true,
          },
          output: {
            ecma: 5,
            comments: false,
            // Turned on because emoji and regex is not minified properly using default
            // https://github.com/facebook/create-react-app/issues/2488
            ascii_only: true,
          },
        }
      }),
    ],
  },
  plugins: [
    new webpackbar(),
    /**
     * 自动生成各种类型的favicon图标
     * 自动生成manifest.json文件
     * 这么做是为了各种设备上的扩展功能，PWA桌面图标/应用启动图标等，主题等
     * https://github.com/itgalaxy/favicons#usage
     * **/
    // new FaviconsWebpackPlugin({
    //   logo: "./public/logo.png", // 原始图片路径
    //   // prefix: "", // 自定义目录，把生成的文件存在此目录下
    //   favicons: {
    //     appName: "ReactPWA", // 你的APP全称
    //     appShortName: "React", // 你的APP简称，手机某些地方会显示，比如切换多个APP时显示的标题
    //     appDescription: "ReactPWA Demo", // 你的APP简介
    //     background: "#222222", // APP启动页的背景色
    //     theme_color: "#222222", // APP的主题色
    //     appleStatusBarStyle: "black-translucent", // 苹果手机状态栏样式
    //     display: "standalone", // 是否显示搜索框，PWA就别显示了
    //     start_url: PUBLIC_PATH, // 起始页，‘.’会自动到主页，比'/'好，尤其是网站没有部署到根域名时
    //     logging: false, // 是否输出日志
    //     pixel_art: false, // 是否自动锐化一下图标，仅离线模式可用
    //     loadManifestWithCredentials: false, // 浏览器在获取manifest.json时默认不会代cookie。如果需要请设置true
    //     icons: {
    //       // 生成哪些平台需要的图标
    //       android: true, // 安卓
    //       appleIcon: false, // 苹果
    //       appleStartup: false, // 苹果启动页
    //       coast: false, // opera
    //       favicons: true, // web小图标
    //       firefox: false, // 火狐
    //       windows: false, // windows8 桌面应用
    //       yandex: false, // Yandex浏览器
    //     },
    //   },
    // }),
    // new HtmlWebpackPlugin({
    //   title: 'antd微前端应用',
    //   template: './src/index.html',
    //   filename:'index.html',
    //   hash:true,
    //   cache:true,
    // }),
    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: 'static/css/[name].[contenthash:8].css',
      chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',
    }),
    new OptimizeCssAssetsPlugin({
      assetNameRegExp: /\.optimize\.css$/g,
      cssProcessor: require('cssnano'),
      cssProcessorPluginOptions: {
        preset: ['default', { discardComments: { removeAll: true } }],
      },
      canPrint: true
    }),
    // new ManifestPlugin({
    //     // fileName: 'asset-manifest.json',
    //     // publicPath: PUBLIC_PATH,
    //     // generate: (seed, files, entrypoints) => {
    //     //   const manifestFiles = files.reduce((manifest, file) => {
    //     //     manifest[file.name] = file.path;
    //     //     return manifest;
    //     //   }, seed);
    //     //   const entrypointFiles = entrypoints.main.filter(
    //     //     fileName => !fileName.endsWith('.map')
    //     //   );

    //     //   return {
    //     //     files: manifestFiles,
    //     //     entrypoints: entrypointFiles,
    //     //   };
    //     // },
    // }),
    new FriendlyErrorsWebpackPlugin(),
    // new WorkboxWebpackPlugin.GenerateSW({
    //   clientsClaim: true,
    //   exclude: [/\.map$/, /asset-manifest\.json$/],
    //   importWorkboxFrom: 'cdn',
    //   navigateFallback: './src/index.html',
    //   navigateFallbackBlacklist: [
    //     // Exclude URLs starting with /_, as they're likely an API call
    //     new RegExp('^/_'),
    //     // Exclude any URLs whose last part seems to be a file extension
    //     // as they're likely a resource and not a SPA route.
    //     // URLs containing a "?" character won't be blacklisted as they're likely
    //     // a route with query params (e.g. auth callbacks).
    //     new RegExp('/[^/?]+\\.[^/]+$'),
    //   ],
    // }),
    new LodashModuleReplacementPlugin,
    new HardSourceWebpackPlugin({
      // cacheDirectory是在高速缓存写入。默认情况下，将缓存存储在node_modules下的目录中，因此如
      // 果清除了node_modules，则缓存也是如此
      cacheDirectory: 'node_modules/.cache/hard-source/[confighash]',
      // Either an absolute path or relative to webpack's options.context.
      // Sets webpack's recordsPath if not already set.
      recordsPath: 'node_modules/.cache/hard-source/[confighash]/records.json',
      // configHash在启动webpack实例时转换webpack配置，并用于cacheDirectory为不同的webpack配
      // 置构建不同的缓存
      configHash: function(webpackConfig) {
         // node-object-hash on npm can be used to build this.
         return require('node-object-hash')({sort: false}).hash(webpackConfig);
      },
      // 当加载器，插件，其他构建时脚本或其他动态依赖项发生更改时，hard-source需要替换缓存以确保输
      // 出正确。environmentHash被用来确定这一点。如果散列与先前的构建不同，则将使用新的缓存
      environmentHash: {
         root: process.cwd(),
         directories: [],
         files: ['package-lock.json', 'yarn.lock'],
      },
  }),
    // new webpack.DllReferencePlugin({
    //   manifest: path.resolve(__dirname, 'build/manifest.json')
    // }),
    // new AddAssetHtmlPlugin({ filepath: path.resolve(__dirname, 'build/lib.dll.js') })
  ]
  // plugins: [
  //   new HtmlWebpackPlugin({
  //     title: 'reactTest',
  //     template: './src/index.html', //指定要打包的html路径和文件名
  //     //filename:'./dst/index.html' ,//指定输出路径和文件名
  //     hash: true,//给生成的 js 文件一个独特的 hash 值 <script type=text/javascript src=bundle.js?22b9692e22e7be37b57e></script>
  //     showErrors:true,//webpack 编译出现错误
  //     minify:{//对 html 文件进行压缩，minify 的属性值是一个压缩选项或者 false 。默认值为false, 不对生成的 html 文件进行压缩
  //              removeComments:true, // 去除注释
  //              collapseWhitespace: true //是否去除空格
  //          }
  //   })
  // ]
}
